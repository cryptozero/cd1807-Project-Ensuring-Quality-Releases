name: Azure Pipelines

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
- main

# ToDo: Replace the agent pool name, if you are using Udacity Cloud lab. 
# Otherwise, comment out the line below. 
pool: myAgentPool

variables:
  python.version: '3.7.6'
  # ToDo: Replace the service connection name as used in the DevOps project settings
  azureServiceConnectionId: 'myServiceConnection'
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  # Environment name
  environmentName: 'test'
  terraform-working-directory: '$(projectRoot)/terraform/environments/$(environmentName)'

stages:
#--------------------------------------------#  
# BUILD STAGE
#--------------------------------------------#    
- stage: Build
  jobs:
  - job: BuildInfrastructure
    steps:
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |           
          #! /bin/bash

          sudo apt-get upgrade -y
          sudo apt-get install unzip zip -y
  
    #--------------------------------------------#  
    # Use Terraform to create the Infrastructure      
    # Install Terraform on the pipeline agent 
    - task: TerraformInstaller@0
      displayName: install terraform
      inputs:
        terraformVersion: 1.3.1

    - bash: ls $(terraform-working-directory)
      displayName: "Check terraform files"
    
    # Run Terraform Init on the pipeline agent 
    # ToDo: Replace the resource group name, storage account name, and container name below
    - task: DownloadSecureFile@1
      displayName: 'Downloading tfvars file'
      name: terraformtfvars
      inputs:
        secureFile: "terraform.tfvars"

    - task: DownloadSecureFile@1
      displayName: Downloading backend.config file'
      name: backendconfig
      inputs:
        secureFile: "backend.config"

    - task: TerraformCLI@0
      displayName: 'terraform init'
      inputs:
        command: init
        commandOptions: "-backend-config=$(backendconfig.secureFilePath)"
        workingDirectory: '$(terraform-working-directory)'

    # ToDo: Run Terraform Validate    
    - task: TerraformCLI@0
      displayName: 'terraform validate'
      inputs:
        command: validate
        workingDirectory: '$(terraform-working-directory)'

    # ToDo: Run Terraform plan    
    - task: TerraformCLI@0
      displayName: 'terraform plan'
      inputs:
        command: plan
        workingDirectory: '$(terraform-working-directory)'
        publishPlanResults: 'test'
        commandOptions: "-var-file=$(terraformtfvars.secureFilePath)"
      
    # OPTIONAL - This step is needed only if your Terraform VM uses an SSH key pair for login and you want your pipeline agent to connect to it. 
    # Generate an SSH key pair in your local/AZ Cloud shell. Use the public key in the Terraform VM module. 
    # Install public key and private key file to the pipeline agent, using the task below. 
    # ToDo: Change the inputs value below
    # - task: InstallSSHKey@0
    #   inputs:
    #     knownHostsEntry: 'KNOWN_HOSTS_STRING' # variable value
    #     sshPublicKey: 'PUBLIC_KEY'            # variable value
    #     sshKeySecureFile: 'id_rsa' # Use secure file feature in the pipeline library UI to save the "id_rsa" file, as mentioned here: https://learn.microsoft.com/en-us/azure/devops/pipelines/library/secure-files?view=azure-devops#add-a-secure-file
    
    # - task: DownloadSecureFile@1
    #  name: udacity_public_key
    #  displayName: 
    #  inputs:
    #   secureFile: 

    
    # Run Terraform Apply
    # ToDo: Change the workingDirectory path, as applicable to you
    - task: TerraformCLI@0
      displayName: 'terraform apply'
      inputs:
        command: apply
        commandOptions: "-var-file=$(terraformtfvars.secureFilePath)"
        workingDirectory: '$(terraform-working-directory)'

    # ToDo: Change the workingDirectory path, as applicable to you
    # Destroy the resources in Azure by running a separate pipeline. 
    # - task: TerraformTaskV3@3
    #   displayName: Terraform destroy
    #   inputs:
    #     provider: 'azurerm'
    #     command: 'destroy'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
    #     environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

#--------------------------------------------#
    - task: NodeTool@0
      inputs:
        versionSpec: '16.x'
      displayName: 'Install Node.js'
    # Postman - Install Newman    
    # ToDo: Update the command and verify the working directory
    - task: CmdLine@2
      displayName: Install Newman
      continueOnError: true
      inputs:
        script: "npm -g install newman"          # ToDo: Write your commands to install newman
        workingDirectory: $(System.DefaultWorkingDirectory)
    # Postman Data Validation Test Suite    
    # ToDo: Verify the working directory and the newman scripts
    - task: CmdLine@2
      displayName: Run Data Validation Tests
      continueOnError: true
      inputs:
        script: newman run Testsuite.Validation.postman_collection.json --environment test.postman_environment.json --reporters cli,junit --reporter-junit-export TEST-validation.xml       # ToDo: Write your commands
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
    # Postman Regression Test Suite    
    # ToDo: Update the command and verify the working directory
    - task: CmdLine@2
      displayName: Run Regression Tests
      continueOnError: true
      inputs:
        script: newman run Testsuite.Regression.postman_collection.json --environment test.postman_environment.json --reporters cli,junit --reporter-junit-export TEST-regression.xml          # ToDo: Write your commands
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
    # Postman - Publish Results 
    # ToDo: Complete the task as explained here: https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/test/publish-test-results?view=azure-devops&tabs=trx%2Cyaml#yaml-snippet
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/TEST-*.xml'
        searchFolder: $(projectRoot)/automatedtesting/postman     # ToDo
        mergeTestResults: true
        testRunTitle: Postman Tests      # ToDo
        publishRunAttachments: true

    #--------------------------------------------#
    # Selenium (UI) Test Suite - Archive the package  
    # "ArchiveFiles@2" picks up the web package and archives it.
    - task: ArchiveFiles@2
      displayName: 'Archive UI Tests'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip'
    # Selenium Test Suite - Publish the package  
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip   # Same as the archiveFile artifact above. 
      displayName: 'Upload Package'
      artifact: drop-uitests

    #--------------------------------------------#    
    # FakeRestAPI - Archive
    # ToDo: Complete the ArchiveFiles@2 task and publish step 
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    # FakeRestAPI - Publish    
    - publish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
      displayName: 'Publish fakerestapi'
      artifact: drop-fakerestapi

    #--------------------------------------------#  
    # JMeter (Performance) Test Suite - Archive
    # ToDo: Complete the ArchiveFiles@2 task and publish step 
    - task: ArchiveFiles@2
      displayName: 'Archive PerformanceTestSuite'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/'
        includeRootFolder: false
        archiveType: zip
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-jmeter.zip'
    # JMeter Test Suite - Publish    
    - publish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-jmeter.zip'
      displayName: 'Publish jmeter'
      artifact: drop-jmeter

#--------------------------------------------#  
# DEPLOYMENT STAGE
#--------------------------------------------#    
- stage: Deploy
  variables:
    - group: test
  jobs:
  #--------------------------------------------#  
  # Deploy FakeRestAPI Web App
  # ToDo: Provide <environment name> you created in your DevOps project
  - deployment: FakeRestAPI
    environment: test   # ToDo
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: $(azureServiceConnectionId)     # ToDo
              appName: $(appName)               # ToDo
              appType: webApp
              package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip       # ToDo: Use the published zip artifact. 
          #--------------------------------------------#    
          # Run JMeter test suite against the App Service
          # ToDo: Update the script below to install jmeter, unzip the jmeter test suite published zip artifact, and run the PerformanceTestSuite.  
          # ToDo: Generate the log file. 
          - task: CmdLine@2
            inputs:
              script: |
                                                                            # ToDo: Write your commands
              workingDirectory: $(Pipeline.Workspace)/drop-jmeter/$(Build.BuildId)-jmeter.zip         # ToDo: Use the artifact name from the task above
              
  #--------------------------------------------#  
  # Selenium | Functional UI Tests
  # ToDo: 
  - deployment: VMDeploy
    displayName: Selenium Tests
    environment:
      name: test        # ToDo: Change/provide a name
      resourceType: VirtualMachine
      tags: selenium
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop-ui-tests     # ToDo: Change/provide a name
            
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |           
                # ToDo: Install Selenium, Chromium-browser & Chromedriver, if not already in the custom VM image. 
                #! /bin/bash
                
                sudo apt-get upgrade -y
                sudo apt-get install python3-pip -y
                sudo apt-get install unzip -y
                sudo apt-get install -y chromium-browser
                pip3 install selenium
                
                #  ToDo: Add chromedriver executable to path
                export PATH=$PATH:/path/to/chromedriver     
                
                # ToDo: Write commands for deploying the UI Test Suite (published zip artifact) to the linux VM and execute the Test Suite
                # ToDo: Direct the output of the Selenium Test Suite to a log file
                
